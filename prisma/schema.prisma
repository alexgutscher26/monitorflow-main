// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model User {
  id         String  @id @default(cuid())
  externalId String? @unique

  quotaLimit Int
  plan       Plan @default(FREE)

  email     String   @unique
  apiKey    String   @unique @default(cuid())
  discordId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategories EventCategory[]
  events           Event[]
  Quota           Quota[]
  webhooks         Webhook[]

  @@index([email, apiKey])
}

model EventCategory {
  id    String  @id @default(cuid())
  name  String
  color Int
  emoji String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events     Event[]

  @@unique([name, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Event {
  id               String @id @default(cuid())
  formattedMessage String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name   String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)
  error         String?

  acknowledged  Boolean        @default(false)
  acknowledgedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  webhookDeliveries WebhookDelivery[]

  @@index([createdAt])
}

model Quota {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  year  Int
  month Int
  count Int @default(0)

  updatedAt DateTime @updatedAt
}

model RateLimit {
  key     String   @id
  count   Int      @default(0)
  resetAt DateTime

  @@index([key])
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
}

model Webhook {
  id          String        @id @default(cuid())
  name        String
  url         String
  secret      String
  description String?
  status      WebhookStatus @default(ACTIVE)
  
  // Which event categories this webhook should receive
  eventCategories String[]
  
  // Headers to send with the webhook request
  headers     Json?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  // Delivery history
  deliveries  WebhookDelivery[]
  
  @@index([userId])
  @@unique([name, userId])
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  webhookId   String
  
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  eventId     String?
  
  requestBody String
  responseBody String?
  statusCode  Int?
  
  success     Boolean
  error       String?
  
  createdAt   DateTime @default(now())
  
  @@index([webhookId])
  @@index([eventId])
}
